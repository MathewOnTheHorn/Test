<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Climbing Tracker</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            background-color: #f0f0f0;
            font-family: Arial, sans-serif;
        }
        #tracker {
            width: 90%;
            max-width: 600px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
            padding: 20px;
        }
        .hidden {
            display: none;
        }
        button {
            margin-top: 10px;
        }
    </style>
    <script src="https://apis.google.com/js/api.js"></script>
    <script>
        let sessionName = '';
        let sessionDate = '';
        let dataEntries = [];

        // Load the Google API client and auth2 library
        gapi.load('client:auth2', initClient);

        function initClient() {
            gapi.client.init({
                apiKey: AIzaSyC3lF5OwHYc1YpOR53HmUa4bHqOnsiP0Ho,
                clientId: 167241811169-uo8aj5aq4uc4j3lp7ma2a3putarmjtb5.apps.googleusercontent.com,
                discoveryDocs: ['https://sheets.googleapis.com/$discovery/rest?version=v4'],
                scope: 'https://www.googleapis.com/auth/spreadsheets'
            }).then(function () {
                // Listen for sign-in state changes.
                gapi.auth2.getAuthInstance().isSignedIn.listen(updateSigninStatus);
                // Handle the initial sign-in state.
                updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());
            });
        }

        function updateSigninStatus(isSignedIn) {
            if (isSignedIn) {
                console.log('User signed in');
            } else {
                gapi.auth2.getAuthInstance().signIn().then(() => {
                    console.log('User signed in');
                }).catch((error) => {
                    console.error('Sign-in error', error);
                });
            }
        }

        function openFullScreen() {
            if (document.documentElement.requestFullscreen) {
                document.documentElement.requestFullscreen();
            } else if (document.documentElement.mozRequestFullScreen) { 
                document.documentElement.mozRequestFullScreen();
            } else if (document.documentElement.webkitRequestFullscreen) { 
                document.documentElement.webkitRequestFullscreen();
            } else if (document.documentElement.msRequestFullscreen) { 
                document.documentElement.msRequestFullscreen();
            }
        }

        function showLocationOptions() {
            const typeElement = document.querySelector('input[name="type"]:checked');
            if (!typeElement) {
                return;
            }
            const type = typeElement.value;
            if (type === 'indoor') {
                document.getElementById('indoorLocation').setAttribute('required', 'required');
                document.getElementById('outdoorLocation').removeAttribute('required');
                document.getElementById('otherOutdoorLocation').removeAttribute('required');
                document.getElementById('boardLocation').removeAttribute('required');
                document.getElementById('boardAngle').removeAttribute('required');

                document.getElementById('indoorLocations').classList.remove('hidden');
                document.getElementById('outdoorLocations').classList.add('hidden');
                document.getElementById('boardLocations').classList.add('hidden');
                document.getElementById('climbName').removeAttribute('required');
            } else if (type === 'outdoor') {
                document.getElementById('outdoorLocation').setAttribute('required', 'required');
                document.getElementById('otherOutdoorLocation').setAttribute('required', 'required');
                document.getElementById('indoorLocation').removeAttribute('required');
                document.getElementById('boardLocation').removeAttribute('required');
                document.getElementById('boardAngle').removeAttribute('required');

                document.getElementById('indoorLocations').classList.add('hidden');
                document.getElementById('outdoorLocations').classList.remove('hidden');
                document.getElementById('boardLocations').classList.add('hidden');
                document.getElementById('climbName').setAttribute('required', 'required');
            } else if (type === 'board') {
                document.getElementById('boardLocation').setAttribute('required', 'required');
                document.getElementById('boardAngle').setAttribute('required', 'required');
                document.getElementById('indoorLocation').removeAttribute('required');
                document.getElementById('outdoorLocation').removeAttribute('required');
                document.getElementById('otherOutdoorLocation').removeAttribute('required');

                document.getElementById('indoorLocations').classList.add('hidden');
                document.getElementById('outdoorLocations').classList.add('hidden');
                document.getElementById('boardLocations').classList.remove('hidden');
                document.getElementById('climbName').removeAttribute('required');
            }
        }

        function showOtherOutdoorLocation() {
            const locationElement = document.getElementById('outdoorLocation');
            if (!locationElement) {
                return;
            }
            const location = locationElement.value;
            if (location === 'Other') {
                document.getElementById('otherOutdoorLocation').classList.remove('hidden');
                document.getElementById('otherOutdoorLocation').setAttribute('required', 'required');
            } else {
                document.getElementById('otherOutdoorLocation').classList.add('hidden');
                document.getElementById('otherOutdoorLocation').removeAttribute('required');
            }
        }

        function showGradeOptions() {
            const disciplineElement = document.querySelector('input[name="discipline"]:checked');
            if (!disciplineElement) {
                return;
            }
            const discipline = disciplineElement.value;
            if (discipline === 'bouldering') {
                updateBoulderingGrades();
                document.getElementById('boulderingGrade').setAttribute('required', 'required');
                document.getElementById('sportGrade').removeAttribute('required');

                document.getElementById('boulderingGrades').classList.remove('hidden');
                document.getElementById('sportGrades').classList.add('hidden');
            } else {
                document.getElementById('sportGrade').setAttribute('required', 'required');
                document.getElementById('boulderingGrade').removeAttribute('required');

                document.getElementById('boulderingGrades').classList.add('hidden');
                document.getElementById('sportGrades').classList.remove('hidden');
            }
        }

        function updateBoulderingGrades() {
            const locationElement = document.getElementById('indoorLocation');
            if (!locationElement) {
                return;
            }
            const location = locationElement.value;
            const boulderingGradeSelect = document.getElementById('boulderingGrade');
            boulderingGradeSelect.innerHTML = '<option value="" disabled selected>Select Grade</option>';
            if (location === 'SoCal' || location === 'Chinook' || location === 'CCC Other') {
                for (let i = 1; i <= 8; i++) {
                    const option = document.createElement('option');
                    option.value = 'C' + i;
                    option.textContent = 'C' + i;
                    boulderingGradeSelect.appendChild(option);
                }
            } else {
                for (let i = 0; i <= 14; i++) {
                    const option = document.createElement('option');
                    option.value = 'V' + i;
                    option.textContent = 'V' + i;
                    boulderingGradeSelect.appendChild(option);
                }
            }
        }

        function showAttemptsField() {
            const statusElement = document.querySelector('input[name="status"]:checked');
            if (!statusElement) {
                return;
            }
            const status = statusElement.value;
            const attemptsField = document.getElementById('attemptsField');
            if (status === 'flash') {
                attemptsField.classList.remove('hidden');
                document.getElementById('attempts').value = 1;
                document.getElementById('attempts').readOnly = true;
            } else {
                attemptsField.classList.remove('hidden');
                document.getElementById('attempts').value = '';
                document.getElementById('attempts').readOnly = false;
            }
        }

        function clearForm() {
            document.getElementById('climbingForm').reset();
            showLocationOptions();
            showGradeOptions();
            const attemptsField = document.getElementById('attemptsField');
            if (attemptsField) {
                attemptsField.classList.add('hidden');
            }
        }

        function startSession() {
            sessionName = document.getElementById('sessionName').value;
            sessionDate = new Date().toISOString().split('T')[0];
            localStorage.setItem('climbingSession', JSON.stringify({ name: sessionName, date: sessionDate }));
            document.getElementById('sessionForm').classList.add('hidden');
            document.getElementById('climbingForm').classList.remove('hidden');
        }

        function handleSubmit(event) {
            event.preventDefault();
            if (!gapi.auth2.getAuthInstance().isSignedIn.get()) {
                gapi.auth2.getAuthInstance().signIn().then(() => {
                    submitData();
                }).catch((error) => {
                    console.error('Sign-in error', error);
                });
            } else {
                submitData();
            }
        }

        function submitData() {
            console.log('Form submitted');
            const climberElement = document.querySelector('input[name="climber"]:checked');
            const typeElement = document.querySelector('input[name="type"]:checked');
            const disciplineElement = document.querySelector('input[name="discipline"]:checked');
            const statusElement = document.querySelector('input[name="status"]:checked');

            if (!climberElement || !typeElement || !disciplineElement || !statusElement) {
                console.log('Form not fully filled');
                return;
            }

            const climber = climberElement.value;
            const type = typeElement.value;
            const locationElement = type === 'indoor' ? document.getElementById('indoorLocation') : type === 'outdoor' ? document.getElementById('outdoorLocation') : document.getElementById('boardLocation');
            const location = locationElement ? locationElement.value : '';
            const specificOutdoorLocation = type === 'outdoor' && location === 'Other' ? document.getElementById('otherOutdoorLocation').value : '';
            const climbName = document.getElementById('climbName') ? document.getElementById('climbName').value : '';
            const boardAngle = type === 'board' ? document.getElementById('boardAngle').value : '';
            const discipline = disciplineElement.value;
            const gradeElement = discipline === 'bouldering' ? document.getElementById('boulderingGrade') : document.getElementById('sportGrade');
            const grade = gradeElement ? gradeElement.value : '';
            const status = statusElement.value;
            const attempts = document.getElementById('attempts').value;

            const data = {
                sessionName,
                sessionDate,
                climber,
                type,
                location: specificOutdoorLocation || location,
                climbName,
                boardAngle,
                discipline,
                grade,
                status,
                attempts,
                timestamp: new Date().toISOString()
            };

            console.log('Data:', data);
            dataEntries.push(data);
            appendToGoogleSheet(data);
            clearForm();
            document.getElementById('downloadBtn').classList.remove('hidden');
        }

        function appendToGoogleSheet(data) {
            const params = {
                spreadsheetId: '1UDinvSmeqCd7vdIrBo3UoWJz2MqE8Lg-DYnt_Ic7Ab4',
                range: 'Sheet1!A1', // Adjust the range as needed
                valueInputOption: 'RAW',
                insertDataOption: 'INSERT_ROWS'
            };

            const valueRangeBody = {
                values: [
                    [data.sessionName, data.sessionDate, data.climber, data.type, data.location, data.climbName, data.boardAngle, data.discipline, data.grade, data.status, data.attempts, data.timestamp]
                ]
            };

            gapi.client.sheets.spreadsheets.values.append(params, valueRangeBody).then((response) => {
                console.log('Data appended to Google Sheet:', response);
            }, (error) => {
                console.error('Error appending data to Google Sheet:', error);
            });
        }

        function downloadCSV() {
            const csvRows = [];
            const headers = Object.keys(dataEntries[0]);
            csvRows.push(headers.join(','));

            for (const row of dataEntries) {
                const values = headers.map(header => JSON.stringify(row[header], replacer));
                csvRows.push(values.join(','));
            }

            const csvData = csvRows.join('\n');
            const blob = new Blob([csvData], { type: 'text/csv' });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.setAttribute('hidden', '');
            a.setAttribute('href', url);
            a.setAttribute('download', `${sessionName}_climbing_data.csv`);
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function replacer(key, value) {
            return value === null ? '' : value;
        }

    </script>
</head>
<body>
    <div id="tracker">
        <h1>Climbing Tracker</h1>
        <form id="sessionForm">
            <label for="sessionName">Session Name:</label>
            <input type="text" id="sessionName" name="sessionName" required>
            <button type="button" onclick="startSession()">Start Session</button>
        </form>
        <form id="climbingForm" onsubmit="handleSubmit(event)" class="hidden">
            <label>Climber:</label>
            <div>
                <label><input type="radio" name="climber" value="Mathew" required> Mathew</label>
                <label><input type="radio" name="climber" value="Julie" required> Julie</label>
            </div>

            <label>Type:</label>
            <div>
                <label><input type="radio" name="type" value="indoor" required onclick="showLocationOptions()"> Indoor</label>
                <label><input type="radio" name="type" value="outdoor" required onclick="showLocationOptions()"> Outdoor</label>
                <label><input type="radio" name="type" value="board" required onclick="showLocationOptions()"> Board</label>
            </div>

            <div id="indoorLocations" class="hidden">
                <label for="indoorLocation">Location:</label>
                <select id="indoorLocation" name="indoorLocation" onchange="updateBoulderingGrades()">
                    <option value="" disabled selected>Select Location</option>
                    <option value="SoCal">SoCal</option>
                    <option value="Chinook">Chinook</option>
                    <option value="Community">Community</option>
                    <option value="Elevated">Elevated</option>
                    <option value="CCC Other">CCC Other</option>
                </select>
            </div>

            <div id="outdoorLocations" class="hidden">
                <label for="outdoorLocation">Location:</label>
                <select id="outdoorLocation" name="outdoorLocation" onchange="showOtherOutdoorLocation()">
                    <option value="" disabled selected>Select Location</option>
                    <option value="Choss">Choss</option>
                    <option value="Buddha">Buddha</option>
                    <option value="Other">Other</option>
                </select>
                <input type="text" id="otherOutdoorLocation" name="otherOutdoorLocation" class="hidden" placeholder="Specify Other Location">
                <label for="climbName">Climb Name:</label>
                <input type="text" id="climbName" name="climbName">
            </div>

            <div id="boardLocations" class="hidden">
                <label for="boardLocation">Board Type:</label>
                <select id="boardLocation" name="boardLocation">
                    <option value="" disabled selected>Select Board</option>
                    <option value="Kilter">Kilter</option>
                    <option value="Grasshopper">Grasshopper</option>
                    <option value="Tension">Tension</option>
                    <option value="Moon">Moon</option>
                    <option value="Other">Other</option>
                </select>
                <label for="boardAngle">Board Angle:</label>
                <input type="number" id="boardAngle" name="boardAngle">
            </div>

            <label>Discipline:</label>
            <div>
                <label><input type="radio" name="discipline" value="bouldering" required onclick="showGradeOptions()"> Bouldering</label>
                <label><input type="radio" name="discipline" value="sport" required onclick="showGradeOptions()"> Sport</label>
            </div>

            <div id="boulderingGrades" class="hidden">
                <label for="boulderingGrade">Grade:</label>
                <select id="boulderingGrade" name="boulderingGrade">
                    <option value="" disabled selected>Select Grade</option>
                </select>
            </div>

            <div id="sportGrades" class="hidden">
                <label for="sportGrade">Grade:</label>
                <select id="sportGrade" name="sportGrade">
                    <option value="" disabled selected>Select Grade</option>
                    <!-- Sport climbing grades with YDS system -->
                    <option value="5.6">5.6</option>
                    <option value="5.7">5.7</option>
                    <option value="5.8a">5.8a</option>
                    <option value="5.8b">5.8b</option>
                    <option value="5.8c">5.8c</option>
                    <option value="5.8d">5.8d</option>
                    <option value="5.9a">5.9a</option>
                    <option value="5.9b">5.9b</option>
                    <option value="5.9c">5.9c</option>
                    <option value="5.9d">5.9d</option>
                    <option value="5.10a">5.10a</option>
                    <option value="5.10b">5.10b</option>
                    <option value="5.10c">5.10c</option>
                    <option value="5.10d">5.10d</option>
                    <option value="5.11a">5.11a</option>
                    <option value="5.11b">5.11b</option>
                    <option value="5.11c">5.11c</option>
                    <option value="5.11d">5.11d</option>
                    <option value="5.12a">5.12a</option>
                    <option value="5.12b">5.12b</option>
                    <option value="5.12c">5.12c</option>
                    <option value="5.12d">5.12d</option>
                    <option value="5.13a">5.13a</option>
                    <option value="5.13b">5.13b</option>
                    <option value="5.13c">5.13c</option>
                    <option value="5.13d">5.13d</option>
                    <option value="5.14a">5.14a</option>
                    <option value="5.14b">5.14b</option>
                    <option value="5.14c">5.14c</option>
                    <option value="5.14d">5.14d</option>
                </select>
            </div>

            <label>Status:</label>
            <div>
                <label><input type="radio" name="status" value="redpoint" required onclick="showAttemptsField()"> Redpoint</label>
                <label><input type="radio" name="status" value="flash" required onclick="showAttemptsField()"> Flash</label>
                <label><input type="radio" name="status" value="project" required onclick="showAttemptsField()"> Project</label>
                <label><input type="radio" name="status" value="climbed" required onclick="showAttemptsField()"> Climbed</label>
            </div>

            <div id="attemptsField" class="hidden">
                <label for="attempts">Attempts:</label>
                <input type="number" id="attempts" name="attempts" min="1">
            </div>

            <button type="submit">Submit</button>
            <button type="button" onclick="clearForm()">Clear</button>
        </form>
        <button onclick="openFullScreen()">Go Fullscreen</button>
        <button id="downloadBtn" class="hidden" onclick="downloadCSV()">Download CSV</button>
    </div>
</body>
</html>
